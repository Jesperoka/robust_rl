"""This code was generated by ChatGPT-4o."""
import numpy as np
import matplotlib.pyplot as plt

# Define the cubic polynomial function
def cubic_function(theta):
    return theta**3 - 6*theta**2 + 4*theta + 12

# Define the first derivative of the cubic function
def cubic_function_derivative(theta):
    return 3*theta**2 - 12*theta + 4

# Define the first-order Taylor expansion at point theta_t
def taylor_expansion(theta, theta_t):
    return cubic_function(theta_t) + cubic_function_derivative(theta_t) * (theta - theta_t)

# Define the penalized Taylor expansion at point theta_t with penalty term (1/alpha) * (1/2) * (theta - theta_t)^2
def penalized_taylor_expansion(theta, theta_t, alpha):
    return taylor_expansion(theta, theta_t) + (1 / (2 * alpha)) * (theta - theta_t)**2

# Finding the minimum of the penalized Taylor expansion
def penalized_taylor_minimum(theta_t, alpha):
    return theta_t - alpha * cubic_function_derivative(theta_t)

# Plotting function
def plot_functions(theta_t, alpha):
    theta = np.linspace(theta_t - 1.5, theta_t + 3.5, 400)
    y_cubic = cubic_function(theta)
    y_taylor = taylor_expansion(theta, theta_t)
    y_penalized_taylor = penalized_taylor_expansion(theta, theta_t, alpha)

    min_theta = penalized_taylor_minimum(theta_t, alpha)
    min_y_penalized = penalized_taylor_expansion(min_theta, theta_t, alpha)
    min_y_cubic = cubic_function(min_theta)

    plt.figure(figsize=(10, 6))
    plt.plot(theta, y_cubic, label="$f(\\theta)$", color='blue')
    plt.plot(theta, y_taylor, label="$f(\\theta_t) + \\nabla f(\\theta_t)^{\\top}(\\theta-\\theta_t)$", linestyle='--', color='green')
    plt.plot(theta, y_penalized_taylor, label="$f(\\theta_t) + \\nabla f(\\theta_t)^{\\top}(\\theta-\\theta_t) + \\frac{1}{2\\alpha}(\\theta - \\theta_t)^{2}$", linestyle=':', color='red')
    plt.scatter([theta_t, min_theta, min_theta], [cubic_function(theta_t), min_y_penalized, min_y_cubic], color='black', zorder=5)  # Marking points
    # plt.title("Cubic Function and its Taylor Expansions")
    plt.xlabel("Î¸")
    plt.ylabel("f")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Parameters
theta_t = 1.8  # Point around which to expand
alpha = 0.1  # Coefficient for the penalty term

# Plot the functions
plot_functions(theta_t, alpha)

